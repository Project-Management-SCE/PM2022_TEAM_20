pipeline {
    agent none
    stages{
        stage('Install requirements'){
            agent{
                docker{
                    image 'python:3.7'
                }
            }
            steps{
                withEnv(["HOME=${env.WORKSPACE}"]){
                    sh 'python -m pip install django'
                    sh 'python -m pip install -r requirements.txt'
		    sh 'python -m pip install django-allauth'
		    
                }
            }
        }
        stage('Compile'){
            agent{
                docker{
                    image 'python:3.7'
                }
            }
            steps{
                withEnv(["HOME=${env.WORKSPACE}"]){
					sh 'python -m compileall WebIStudy//'//manage.py'
                    sh 'pip install django_jenkins'
		    sh 'pip install Selenium'
		    sh 'pip install chromedriver-py'
		    sh 'pip install chromedriver-binary'
		    sh 'pip install chromedriver-binary-auto'
		    sh 'pip install Pillow'
		    sh 'pip install gunicorn'
		    sh 'pip install whitenoise'
		    sh 'pip install coverage'
		    sh '''
                      export PATH=$PATH:`chromedriver-path`   
                    '''

                }
            }
        }
        stage('Tests'){
            agent{
                docker{
                    image 'python:3.7'
                }
            }
            steps{
                withEnv(["HOME=${env.WORKSPACE}"]){
		    sh 'rm -f -r */migrations/0*'		    
		    sh 'python manage.py makemigrations'
		    sh 'python manage.py migrate'
		    sh 'BUILD_ID=dontKillMe nohup python manage.py runserver host_server &'
                    sh 'python manage.py test ./WebIStudy'
                }
            }
         }
	 
	 
	 stage('Coverage'){
            agent{
                docker{
                    image 'python:3.7'
                }
            }
            steps{
                withEnv(["HOME=${env.WORKSPACE}"]){
			sh 'python manage.py makemigrations'
		  	sh 'python manage.py migrate'
			sh 'python -m coverage run --source="." manage.py test views.py urls.py tests.py Validation.py'
			sh 'python -m coverage report'
                }
            }
         }
	 
	 
	 
	 
	 stage('Deploy to Heroku') {
            agent {
                docker {
                    image 'cimg/base:stable'
                    args '-u root'
                }
            }
            steps {
                sh '''
		
			curl https://cli-assets.heroku.com/install.sh | sh;
			heroku container:login
			heroku container:push web --app webistudy
                    	heroku container:release web --app webistudy
                '''
            }
        }
    }
}
